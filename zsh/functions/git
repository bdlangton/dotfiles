# Execute git with just 'g'. If no arguments are provided, executes 'git st'.
g () {
  if [[ $# -gt 0 ]]; then
    git $@
  else
    git st
  fi
}

# Git add -p with user supplied subdirectory.
git-add-subdirectory() {
  if [ -n "$1" ]; then
    git add -p $(git rev-parse --show-toplevel)/"$1"
  else
    git add -p
  fi
}

# Detect the project type of the git repo that you're currently in.
project_type() {
  # Not in a git repo, display nothing.
  is_in_git_repo || { echo -n ""; return }

  # Get the base git repo directory.
  local base_dir="$(git rev-parse --show-toplevel)"

  # PHP.
  if [[ -f $base_dir/composer.json || -f $base_dir/web/composer.json  || -f $base_dir/docroot/composer.json ]]; then
    echo -n "\ue608"
  # Ruby.
  elif [[ -f $base_dir/Gemfile ]]; then
    echo -n "\ue21e"
  # Docker.
  elif [[ -f $base_dir/docker-compose.yml ]]; then
    echo -n "\uf308"
  # Node.
  elif [[ -f $base_dir/package.json ]]; then
    echo -n "\ue718"
  # Generic git icon.
  else
    echo -n "\uf1d2"
  fi
}

# Print out lines that were removed/changed from the specified sha/branch.
# This is so you can see if you've removed/changed something that was just
# recently modified.
git-blame-removals() {
  if [ -n "$1" ]; then
    php ~/.php/git-blame-removals.php $1
  else
    echo "You must provide a sha or branch to compare against."
  fi
}
