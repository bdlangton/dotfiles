## Forms API

snippet checkbox
$form['${1:/* form element */}'] = array(
	'#type' => 'checkbox',
	'#title' => t('${2:/* title */}'),
	'#description' => t('${3:/* description */}'),
);
endsnippet

snippet checkboxes
$form['${1:/* form element */}'] = array(
	'#type' => 'checkboxes',
	'#title' => t('${2:/* title */}'),
	'#description' => t('${3:/* description */}'),
	'#options' => array(
		'${4:/* key */}' => t('${5:/* value */}'),
	),
);
endsnippet

snippet file
$form['${1:/* form element */}'] = array(
	'#type' => 'file',
	'#title' => t('${2:/* title */}'),
	'#description' => t('${3:/* description */}'),
);
endsnippet

snippet select
$form['${1:/* form element */}'] = array(
	'#type' => 'select',
	'#title' => t('${2:/* title */}'),
	'#description' => t('${3:/* description */}'),
	'#options' => array(
		'${4:/* key */}' => t('${5:/* value */}'),
	),
);
endsnippet

snippet submit
$form['${1:/* form element */}'] = array(
	'#type' => 'submit',
	'#value' => t('${2:/* value */}'),
);
endsnippet

snippet textarea
$form['${1:/* form element */}'] = array(
	'#type' => 'textarea',
	'#title' => t('${2:/* title */}'),
	'#rows' => ${3:/* default:5 */},
);
endsnippet

snippet textfield
$form['${1:/* form element */}'] = array(
	'#type' => 'textfield',
	'#title' => t('${2:/* title */}'),
	'#size' => ${3:/* default:60 */},
);
endsnippet

snippet text_format
$form['${1:/* form element */}'] = array(
	'#type' => 'text_format',
	'#title' => t('${2:/* title */}'),
	'#size' => ${3:/* default:60 */},
	'#format' => ${4:NULL},
);
endsnippet

## Hooks

snippet hook_cron
/**
 * Implements hook_cron().
 */
function `!p snip.rv = snip.basename`_cron() {
	/*
	 *  // Short-running operation example, not using a queue:
	 *  // Delete all expired records since the last cron run.
	 *  $expires = variable_get('mymodule_cron_last_run', REQUEST_TIME);
	 *  db_delete('mymodule_table')
	 *    ->condition('expires', $expires, '>=')
	 *    ->execute();
	 *  variable_set('mymodule_cron_last_run', REQUEST_TIME);
	 *
	 *  // Long-running operation example, leveraging a queue:
	 *  // Fetch feeds from other sites.
	 *  $result = db_query('SELECT * FROM {aggregator_feed} WHERE checked + refresh < :time AND refresh != :never', array(
	 *    ':time' => REQUEST_TIME,
	 *    ':never' => AGGREGATOR_CLEAR_NEVER,
	 *  ));
	 *  $queue = DrupalQueue::get('aggregator_feeds');
	 *  foreach ($result as $feed) {
	 *    $queue->createItem($feed);
	 *  }
	 */
	 ${1:/* Your code here */}
}
endsnippet

snippet hook_form_alter
/**
 * Implements hook_form_alter().
 */
function `!p snip.rv = snip.basename`_form_alter(&$form, $form_state, $form_id) {
	switch ($form_id) {
		case '${1:/* your form */}':
			${2:// your code.}
	}
}
endsnippet

snippet hook_form_FORM_ID_alter
/**
 * Implements hook_form_FORM_ID_alter().
 */
function `!p snip.rv = snip.basename`_form_${1:/* form id */}_alter(&$form, $form_state, $form_id) {
	${2:// your code.}
}
endsnippet

snippet hook_init
/**
 * Implements hook_init().
 */
function `!p snip.rv = snip.basename`_init() {
	${1:/* your code here */}
}
endsnippet

snippet hook_menu
/**
 * Implements hook_menu().
 */
function `!p snip.rv = snip.basename`_menu() {
	/*
	 *$items['blog'] = array(
	 *  'title' => 'blogs',
	 *  'page callback' => 'blog_page',
	 *  'access arguments' => array('access content'),
	 *  'type' => MENU_SUGGESTED_ITEM,
	 *);
	 */
	$items['${1:path/to/register}'] = array(
		'title' => '${2:Page title}',
		'page callback' => '${3:callback_function}',
		'page arguments' => array(${4}),
		'access arguments' => array('${5:View published content}'),
		'type' => ${6:MENU_NORMAL_ITEM}, // MENU_CALLBACK, MENU_LOCAL_TASK, MENU_DEFAULT_LOCAL_TASK, MENU_LOCAL_ACTION, MENU_SUGGESTED_ITEM,
		// 'file' => '${7:`!p snip.rv = snip.basename`.pages.inc}',
	);

	return $items;
}
endsnippet

snippet hook_menu_alter
/**
 * Implements hook_menu_alter().
 */
function `!p snip.rv = snip.basename`_menu_alter(&$items) {
	// Example - disable the page at node/add
	/*
	 *$items['node/add']['access callback'] = FALSE;
	 */
	${1:/* Your code here */}
}
endsnippet

snippet hook_theme
/**
 * Implements hook_theme().
 */
function `!p snip.rv = snip.basename`_theme($existing, $type, $theme, $path) {
	return array(
		/*
		 *'forum_icon' => array(
		 *  'variables' => array('new_posts' => NULL, 'num_posts' => 0, 'comment_mode' => 0, 'sticky' => 0),
		 *),
		 *'status_report' => array(
		 *  'render element' => 'requirements',
		 *  'file' => 'system.admin.inc',
		 *),
		 */
		'${1}' => array(
			'render element' => '${2}',
			'file' => '${3}',
			'variables' => array('${4}' => NULL, '${5}' => NULL${6}),
		),
	);
}
endsnippet

## Entities.

snippet entity_storage
\Drupal::entityTypeManager()->getStorage('${1:entity}');
endsnippet

## Links and URLs.

snippet link_from_text_and_uri
Link::fromTextAndUrl('${1:text}', ${2:$url});
endsnippet

snippet link_from_route
Link::createFromRoute('${1:text}', '${2:route_name}', $params, $options);
endsnippet

snippet url_from_route
Url::fromRoute('${1:route_name}', $params, $options);
endsnippet

snippet url_from_uri
Url::fromUri('internal:/${1:uri}');
endsnippet

## Debugging.

snippet logger
\Drupal::logger('${1:module}')->debug('${2:message}');
endsnippet

snippet php_debug
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);
endsnippet

## Config and state.

snippet config_get
\Drupal::service('config')->get('${1:variable}');
endsnippet

snippet config_set
\Drupal::service('config')->set('${1:variable}', ${2:value});
endsnippet

snippet state_get
\Drupal::service('state')->get('${1:variable}');
endsnippet

snippet state_set
\Drupal::service('state')->set('${1:variable}', ${2:value});
endsnippet

## Queries.

snippet entity_query
$result = \Drupal::entityQuery('${1:entity type}')
      ->condition('type', '${2:bundle}')
      ->execute();
endsnippet

snippet query
$results = \Drupal::database()->query('${1:query}')->fetchAll();
endsnippet
