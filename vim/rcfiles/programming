" Set folding so it only folds the top level and doesn't auto fold.
set foldmethod=indent
set nofoldenable
set foldlevel=20

" Prompt for a single input to pass to Drupal Console.
function! DrupalSingleInput(command, text)
  call inputsave()
  let input = input(a:text)
  call inputrestore()
  execute 'VtrSendCommandToRunner ' g:drush a:command input
endfunction

" Prompt for a single input to pass to Drush.
function! DrushSingleInput(command, text)
  call inputsave()
  let input = input(a:text)
  call inputrestore()
  execute 'VtrSendCommandToRunner ' g:drush a:command input
endfunction

" Execute a drush command.
function! ExecuteDrushCommand(command)
  execute 'VtrSendCommandToRunner ' g:drush a:command
endfunction

" Prompt for a command and send it to the runner.
function! SendVtrCommand()
  call inputsave()
  let command = input('Enter the command: ')
  call inputrestore()
  call ExecuteVtrCommand(command)
endfunction

" Execute command to send to runner.
function! ExecuteVtrCommand(command)
  execute 'VtrSendCommandToRunner ' a:command
endfunction

" Strip values from the string.
" Copied from vim-tmux-runner's s:Strip.
function! Strip(string)
  return substitute(a:string, '^\s*\(.\{-}\)\s*\n\?$', '\1', '')
endfunction

" Send Tmux command.
" Copied from vim-tmux-runner's s:SendTmuxCommand.
function! SendTmuxCommand(command)
  let prefixed_command = "tmux " . a:command
  return Strip(system(prefixed_command))
endfunction

" Execute a Tmux command on the target pane.
function! ExecuteTmuxCommand(command, target_pane)
  let command = shellescape(a:command)
  let cmd = g:VtrClearSequence.command
  let targeted_command = "send-keys -t " . a:target_pane
  let full_command = join([targeted_command, cmd])
  call SendTmuxCommand(full_command)

  " Execute an Enter command so the command will execute.
  let targeted_command = "send-keys -t " . a:target_pane
  let full_command = join([targeted_command, "Enter"])
  call SendTmuxCommand(full_command)
endfunction

" Prompt for a drush command to use.
" Should include 'drush' so if you want to use an alias do 'drush @alias'. If
" you use lando do: 'lando drush'.
function! SetDrushCommand()
  call inputsave()
  let g:drush = input('Use drush command: ')
  call inputrestore()
  call EchoDrushCommand()
endfunction

" Echo the drush command.
function! EchoDrushCommand()
  echohl String | echo "\rDrush command set to: " . g:drush | echohl None
endfunction

" View detailed information about a linting error.
nnoremap <Leader>i :ALEDetail<CR>

" Set default drush command to 'drush'.
let g:drush = 'drush'

" Drupal mappings to the vim-tmux-runner.
nnoremap <Leader>dcc :call ExecuteDrushCommand('cr')<CR>
nnoremap <Leader>dud :call ExecuteDrushCommand('updb -y')<CR>
nnoremap <Leader>dul :call ExecuteDrushCommand('uli')<CR>
nnoremap <Leader>dwd :call ExecuteDrushCommand('watchdog-show')<CR>
nnoremap <Leader>dce :call ExecuteDrushCommand('cex sync -y')<CR>
nnoremap <Leader>dci :call ExecuteDrushCommand('cim sync -y')<CR>
nnoremap <Leader>dmi :call DrushSingleInput('en -y', 'Enter module to install: ')<CR>
nnoremap <Leader>dmu :call DrushSingleInput('pmu -y', 'Enter module to uninstall: ')<CR>
nnoremap <Leader>dsa :call SetDrushCommand()<CR>
nnoremap <Leader>dsl :call EchoDrushCommand()<CR>
nnoremap <Leader>drc :call DrushSingleInput('', 'Enter the drush command: ')<CR>

" Add fzf searches to specific backend/frontend/vendor/config/test directories
" if available.
if exists('g:backend_dir')
  nnoremap <Leader>Ab :call CdDir(g:backend_dir)<CR>:Agb<CR>
  nnoremap <expr> <Leader>Fb ':Files ' . g:backend_dir . '/<CR>'
endif
if exists('g:frontend_dir')
  nnoremap <Leader>Af :call CdDir(g:frontend_dir)<CR>:Agf<CR>
  nnoremap <expr> <Leader>Ff ':Files ' . g:frontend_dir . '/<CR>'
endif
if exists('g:config_dir')
  nnoremap <Leader>Ac :call CdDir(g:config_dir)<CR>:Agc<CR>
  nnoremap <expr> <Leader>Fc ':Files ' . g:config_dir . '/<CR>'
endif
if exists('g:vendor_dir')
  nnoremap <Leader>Av :call CdDir(g:vendor_dir)<CR>:Agv<CR>
  nnoremap <expr> <Leader>Fv ':Files ' . g:vendor_dir . '/<CR>'
endif
if exists('g:test_dir')
  nnoremap <Leader>At :call CdDir(g:test_dir)<CR>:Ag<CR>
  nnoremap <expr> <Leader>Ft ':Files ' . g:test_dir . '/<CR>'
endif

" When inside inserted chars from lexima, go to the right of all of them.
inoremap <C-l> <C-r>=lexima#insmode#leave_all("")<CR>

" Set tags file.
let g:autotagTagsFile = 'tags'

augroup programming
  " Commentary comment string for php.
  autocmd FileType php setlocal commentstring=//\ %s

  " Set *.theme files to be php filetype.
  autocmd BufRead,BufNewFile *.theme setlocal filetype=php
augroup end

" vim:ft=vim
