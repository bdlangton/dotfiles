" Change directory to docroot if possible.
" This is just for Drupal sites where the current dir might be above docroot and
" we need to be in docroot for drush/drupal console.
function! g:CdDocroot()
  if isdirectory('docroot')
    cd docroot
  elseif isdirectory('web')
    cd web
  endif
endfunction

" CD into a directory.
function! g:CdDir(dir)
  let root = projectroot#guess() . '/' . a:dir
  exe 'cd ' . root
endfunction

" Prompt for a directory to CD into.
function! g:PromptDir()
  let root = getcwd()
  if exists('w:saved_dir')
    let root = w:saved_dir
  endif
  call inputsave()
  let input = input('Search dir: ' . root . '/')
  call inputrestore()
  if (isdirectory(root . '/' . input))
    exe 'cd ' . root . '/' . input
  endif
endfunction

" Handle closing diff opened with :Gdiff
function! g:Gdiffoff()
  let diffbufnr = bufnr('^fugitive:')
  if diffbufnr > -1 && &diff
    diffoff | q
    if bufnr('%') == diffbufnr
      Gedit
    endif
  endif
endfunction

" Set colors for lightline modified.
function! LightlineModified()
  if !has('nvim')
    " PaperColor settings.
    if (g:my_theme =~# 'PaperColor')
      if (&background =~# 'dark')
        if &modified
          exe printf('%s', 'hi ModifiedColor guifg=Black guibg=Yellow ctermbg=LightYellow term=bold cterm=bold')
          return ' +'
        elseif &modifiable
          exe printf('%s', 'hi ModifiedColor ctermfg=234 ctermbg=66 guifg=#1c1c1c guibg=#5f8787 term=bold cterm=bold')
          return ''
        else
          exe printf('%s', 'hi ModifiedColor guifg=White guibg=Magenta ctermbg=Blue term=bold cterm=bold')
          return ' -'
        endif
      else
        if &modified
          exe printf('%s', 'hi ModifiedColor guifg=Black guibg=Yellow ctermbg=LightYellow term=bold cterm=bold')
          return ' +'
        elseif &modifiable
          exe printf('%s', 'hi ModifiedColor guifg=White guibg=#005f87 ctermbg=24 term=bold cterm=bold')
          return ''
        else
          exe printf('%s', 'hi ModifiedColor guifg=White guibg=Magenta ctermbg=Blue term=bold cterm=bold')
          return ' -'
        endif
      endif
    endif
  " Settings for everything else.
  else
    if (&background =~# 'dark')
      if &modified
        exe printf('%s', 'hi ModifiedColor guifg=Black guibg=Yellow term=bold cterm=bold')
        return ' +'
      elseif &modifiable
        exe printf('%s', 'hi ModifiedColor guifg=White guibg=#657b83 term=bold cterm=bold')
        return ''
      else
        exe printf('%s', 'hi ModifiedColor guifg=White guibg=Magenta term=bold cterm=bold')
        return ' -'
      endif
    else
      if &modified
        exe printf('%s', 'hi ModifiedColor guifg=Black guibg=Yellow ctermbg=LightYellow term=bold cterm=bold')
        return ' +'
      elseif &modifiable
        exe printf('%s', 'hi ModifiedColor guifg=White guibg=#839496 ctermbg=LightGray term=bold cterm=bold')
        return ''
      else
        exe printf('%s', 'hi ModifiedColor guifg=White guibg=Magenta ctermbg=Magenta term=bold cterm=bold')
        return ' -'
      endif
    endif
  endif
endfunction

" Set lightline customizations.
function! SetLightline()
  set t_Co=256

  " Customized lightline for solarized theme.
  if (g:my_theme =~# 'solarized')
    source ~/.vimrc-solarizedcustom-lightline
  endif

  " Set the lightline colorscheme.
  let g:lightline = {
        \ 'colorscheme': g:my_theme,
        \ 'component': {
        \   'modified': '%#ModifiedColor#%{LightlineModified()}',
        \ }
        \ }

  let g:lightline.component_function = {
        \   'gitbranch': 'fugitive#head'
        \ }

  let g:lightline.component_expand = {
        \  'linter_checking': 'lightline#ale#checking',
        \  'linter_warnings': 'lightline#ale#warnings',
        \  'linter_errors': 'lightline#ale#errors',
        \  'linter_ok': 'lightline#ale#ok',
        \ }

  let g:lightline.component_type = {
        \     'linter_checking': 'left',
        \     'linter_warnings': 'warning',
        \     'linter_errors': 'error',
        \     'linter_ok': 'left',
        \ }

  let g:lightline#ale#indicator_checking = "\uf110 "
  let g:lightline#ale#indicator_warnings = "\uf071 "
  let g:lightline#ale#indicator_errors = "\uf05e "
  let g:lightline#ale#indicator_ok = "\uf00c "

  " Set the active right side to include ale linting.
  let g:lightline.active = { 'right': [
        \     [
        \         'linter_checking', 'linter_errors',
        \         'linter_warnings', 'linter_ok', 'gitbranch'
        \     ],
        \     [ 'lineinfo' ],
        \     [ 'percent' ],
        \     [ 'fileencoding', 'filetype' ]
        \ ] }
endfunction

" Customize the solarized theme.
function! CustomizeSolarized()
  " Modify colors that differ between light/dark.
  if (g:my_color =~# 'dark')
    hi ColorColumn ctermbg=0 guibg=Grey40
    hi CursorLine ctermbg=0 guibg=DarkCyan guifg=White
    hi LineNr ctermfg=254 guifg=#e4e4e4
  elseif (g:my_color =~# 'light')
    hi CursorLine ctermbg=7 guibg=DarkCyan guifg=White
  endif

  " Modify colors that are the same for both dark and light.
  hi clear SignColumn
  hi DiffAdd guifg=White guibg=DarkCyan
  hi DiffChange guifg=White guibg=DarkYellow
  hi DiffDelete guifg=Black guibg=#ffa0a0
  hi default link GitGutterAdd DiffAdd
  hi default link GitGutterChange DiffChange
  hi default link GitGutterDelete DiffDelete
  hi DbgBreakptSign guifg=Black guibg=Cyan
  hi DbgBreakptLine guifg=Black guibg=Cyan
  hi PMenu guibg=DarkBlue
  hi PMenuSel guibg=Cyan
  hi SpecialKey guifg=black guibg=red
  hi LightlineRight_active_warning ctermfg=black ctermbg=yellow guifg=black guibg=yellow
  hi LightlineRight_active_error ctermfg=white ctermbg=red guifg=white guibg=red
  hi LightlineRight_active_0 ctermfg=15 ctermbg=4 guifg=#fdf6e3 guibg=#268bd2
endfunction

" Customize the papercolor theme.
function! CustomizePaperColor()
  hi LightlineRight_active_warning ctermfg=white ctermbg=darkyellow guifg=white guibg=darkyellow
  hi LightlineRight_active_error ctermfg=white ctermbg=red guifg=white guibg=red
  hi LightlineRight_active_0 ctermfg=15 ctermbg=4 guifg=#fdf6e3 guibg=#268bd2
endfunction

" Set theme.
function! g:SetTheme(theme)
  let g:my_theme = a:theme
  call UpdateTheme()
endfunction

" Set color to dark or light.
function! g:SetColor(color)
  let g:my_color = a:color
  call UpdateTheme()
endfunction

" Update theme/color after changed.
" Default theme/color are set in vim/rcfiles/theme.
function! g:UpdateTheme()
  " Set the theme color to light/dark.
  exe 'set background=' . g:my_color

  " Handle themes where the light and dark versions are actually different
  " themes.
  if (exists('&g:colors_name') && (g:colors_name == 'wwdc17' || g:colors_name == 'wwdc16'))
    if (g:my_color =~# 'dark')
      colorscheme wwdc16
    else
      colorscheme wwdc17
    endif
  else
    exe 'colorscheme ' . g:my_theme
  endif

  " Set lightline customizations.
  " Note: lightline doesn't update without restarting vim, so if you change
  " themes or light/dark using SetTheme or SetColor lightline won't update.
  call SetLightline()

  " Customize on a theme by theme basis.
  if (g:my_theme =~# 'solarized')
    call CustomizeSolarized()
  elseif (g:my_theme =~# 'PaperColor')
    call CustomizePaperColor()
  endif

  " Clear links for doxygen sections that were linked to Todo by
  " vim-plugin-for-drupal.
  hi link doxygenBrief NONE
  hi link doxygenSpecialTypeOnelineDesc NONE
endfunction

" Set a command to call the SetTheme and SetColor function so we can change
" themes and light/dark on the fly.
command! -nargs=1 SetTheme call g:SetTheme(<f-args>)
command! -nargs=1 SetColor call g:SetColor(<f-args>)

" vim:ft=vim
