# =============================================================================
# Basic Configuration

# Fix copy paste for Mac OS Sierra.
set -g default-shell $SHELL
set -g default-command "reattach-to-user-namespace -l ${SHELL}"

# Make iTerm tab name the tmux session name.
set-option -g set-titles on
set-option -g set-titles-string '#S'

# Start numbering at 1 (easier to switch between a few screens).
set -g base-index 1
setw -g pane-base-index 1

# Renumber windows sequentially after closing any of them.
set -g renumber-windows on

# Increase scrollback lines.
set -g history-limit 10000

# Set refresh interval for the status bar.
set -g status on
set -g status-interval 30

# Increase the length of the left side of the status bar (so the window name can
# be seen in full if it is a long name).
set -g status-left-length 50

# =============================================================================
# Custom Key Mappings

# Set Escape key (remapped to Caps Lock with Karabiner-Elements) as the prefix.
unbind-key C-b
set -g prefix Escape
bind-key Escape send-prefix

# Force a reload of the config file.
unbind r
bind r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"

# Quick pane cycling.
unbind ^A
bind ^A select-pane -t :.+

# Break out of the current session, creating a new session based on the current
# directory.
bind-key B send-keys 'tat  exit' 'Cm'

# Kill the current session and switch us to another session so we don't leave
# tmux.
bind-key X run-shell 'tmux switch-client -n \; kill-session -t "$(tmux display-message -p "#S")" || tmux kill-session'

# Kill specific session.
bind C-x split-window -v "tmux list-sessions | sed -E 's/[[].*$//' | fzf --reverse | awk -F: '{ print $1; }' | xargs tmux kill-session -t"

# Switch session.
bind s split-window -v "tmux list-sessions | sed -E 's/[[].*$//' | grep -v \"^$(tmux display-message -p '#S'):\" | fzf --reverse | awk -F: '{ print $1; }' | xargs tmux switch-client -t"

# Switch window.
bind w split-window -v "tmux list-windows -a | sed -E 's/[[].*$//' | grep -v \"$(tmux display-message -p '#S:#P: #W')\" | fzf --reverse | awk -F: '{ print $1\":\"$2; }' | xargs tmux switch-client -t"

# Kill current pane without confirmation.
bind-key x kill-pane

# Move window to the left or right.
bind-key -n C-S-Left swap-window -t -1
bind-key -n C-S-Right swap-window -t +1

# Prompt for the window to join-pane with (J = join with, S = send to).
# The -d doesn't follow the pane to the new window.
bind-key J choose-window "join-pane -d -s '%%'"
bind-key S choose-window "join-pane -d -t '%%'"

# Setup 'v' to begin selection as in Vim.
bind-key -T copy-mode-vi 'v' send-keys -X begin-selection
bind-key -T copy-mode-vi 'y' send-keys -X copy-pipe-and-cancel 'reattach-to-user-namespace pbcopy'

# Update default binding of `Enter` to also use copy-pipe.
unbind -T copy-mode-vi Enter
bind-key -T copy-mode-vi 'Enter' send-keys -X copy-pipe-and-canel 'pbcopy'

# Map moving panes like vim.
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Fine adjustment of current pane with shift and arrow keys.
bind -n S-Left resize-pane -L 2
bind -n S-Right resize-pane -R 2
bind -n S-Down resize-pane -D 1
bind -n S-Up resize-pane -U 1

# Smart pane switching with awareness of vim splits.
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"
# bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys 'C-\\') || tmux select-pane -l"

# Create new window with the current path.
bind c new-window -c "#{pane_current_path}"

# Prompt for name when creating a new window (only when using capital C).
bind-key C command-prompt -p "Name of new window: " "new-window -n '%%'"

# Mappings for splitting window that is more memorable than %/&.
bind-key - split-window -v -c '#{pane_current_path}'
bind-key \ split-window -h -c '#{pane_current_path}'

# Quick pane configurations. These close the split window once you close the
# application that is opened. If you do a command that returns right away (ls,
# git status, etc) then pipe it to 'less' so the window doesn't immediately
# close.
bind -n C-x command-prompt -p "Command to execute: " "split-window -h -c '#{pane_current_path}' '%%'"
bind -n C-a split-window -h -c '#{pane_current_path}' 'gadd'
bind -n C-o split-window -h -c '#{pane_current_path}' "vim ~/Notes/Projects/$(tmux display-message -p '#S').md"
bind -n C-\ split-window -h -c '#{pane_current_path}' 'php -a'

# =============================================================================
# Plugins

# Plugins.
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'

# Initialize TMUX plugin manager (keep this line at the very bottom of
# tmux.conf).
run '~/.tmux/plugins/tpm/tpm'

# =============================================================================
# Theme - mostly taken from nord tmux and modified.

# Use 256 term for pretty colors.
set -g default-terminal "screen-256color"

# Window styles.
set -g window-style 'bg=brightgreen'
set -g window-active-style 'bg=brightblack'

# Layout.
set -g status-justify left

# Colors.
set -g status-style 'fg=white,bg=brightblack'

# Panes.
set -g pane-border-style 'fg=cyan,bg=cyan'
set -g pane-active-border-style 'fg=magenta,bg=cyan'
set -g display-panes-colour brightgreen
set -g display-panes-active-colour black

# Clock mode.
setw -g clock-mode-colour cyan

# Messages.
set -g message-style 'fg=white,bg=brightblack'
set -g message-command-style 'fg=white,bg=brightblack'

# Prefix highlights.
set -g @prefix_highlight_fg black
set -g @prefix_highlight_bg brightcyan
set -g @prefix_highlight_output_prefix "#[fg=brightcyan]#[bg=black]#[nobold]#[noitalics]#[nounderscore]#[bg=brightcyan]#[fg=black]"
set -g @prefix_highlight_output_suffix ""
set -g @prefix_highlight_copy_mode_attr "fg=brightcyan,bg=black,bold"

# Status bar colors.
set -g status-left "#[fg=brightblack,bg=blue,bold] #S #[fg=blue,bg=brightblack,nobold,noitalics,nounderscore]"
set -g status-right "#{prefix_highlight}#[fg=black,bg=brightblack,nobold,noitalics,nounderscore]#[fg=white,bg=black] %m.%d.%y #[fg=white,bg=black,nobold,noitalics,nounderscore]#[fg=white,bg=black] %H:%M #[fg=blue,bg=black,nobold,noitalics,nounderscore]#[fg=brightblack,bg=blue] #H "
set -g window-status-format "#[fg=brightblack,bg=black,nobold,noitalics,nounderscore] #[fg=white,bg=black]#I #[fg=white,bg=black,nobold,noitalics,nounderscore] #[fg=white,bg=black]#W #F #[fg=black,bg=brightblack,nobold,noitalics,nounderscore]"
set -g window-status-current-format "#[fg=brightblack,bg=cyan,nobold,noitalics,nounderscore] #[fg=brightblack,bold,bg=cyan]#I #[fg=brightblack,bg=cyan,nobold,noitalics,nounderscore] #[fg=brightblack,bold,bg=cyan]#W #F #[fg=cyan,bg=brightblack,nobold,noitalics,nounderscore]"
set -g window-status-separator ""

# =============================================================================
# Local config

if-shell "[ -f ~/.tmux.conf.local ]" 'source ~/.tmux.conf.local'
